// Generated by Haxe 3.4.2
if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");
(function () { "use strict";
var Main = function() {
	this.mainWindow = null;
	var _gthis = this;
	electron_CrashReporter.start({ companyName : "Monk Markdown Editor", submitURL : "https://github.com/MatthijsKamstra/hx-markdown-editor/issues"});
	electron_main_App.on("window_all_closed",function(e) {
		if(process.platform != "darwin") {
			electron_main_App.quit();
		}
	});
	electron_main_App.on("ready",function(e1) {
		_gthis.mainWindow = new electron_main_BrowserWindow({ width : 1200, height : 800, backgroundColor : "#2e2c29", titleBarStyle : "hidden"});
		_gthis.mainWindow.on("closed",function() {
			if(process.platform != "darwin") {
				electron_main_App.quit();
			}
			_gthis.mainWindow = null;
		});
		_gthis.mainWindow.loadURL("file://" + __dirname + "/index.html");
		new MainMenu(_gthis);
		electron_main_IpcMain.on("test",function(event,test) {
			var content = "Some text to save into the file";
		});
		electron_main_IpcMain.on("OpenDialog",function(event1) {
			_gthis.onOpenDialogHandler(event1);
		});
		electron_main_IpcMain.on("SAVE_FILE",function(event2,filepath,content1) {
			_gthis.onSaveFileHandler(event2,filepath,content1);
		});
		electron_main_IpcMain.on("SAVE_AS_FILE",function(event3,filepath1,content2) {
			_gthis.onSaveAsFileHandler(event3,filepath1,content2);
			haxe_Log.trace("yep",{ fileName : "Main.hx", lineNumber : 123, className : "Main", methodName : "new"});
		});
		electron_main_IpcMain.on("asynchronous-message",function(event4,arg) {
			haxe_Log.trace(arg,{ fileName : "Main.hx", lineNumber : 129, className : "Main", methodName : "new"});
			event4.sender.send("asynchronous-reply","pong");
		});
		electron_main_IpcMain.on("synchronous-message",function(event5,arg1) {
			haxe_Log.trace(arg1,{ fileName : "Main.hx", lineNumber : 135, className : "Main", methodName : "new"});
			event5.returnValue = "pong";
		});
		electron_main_IpcMain.on("doorBell",function(event6,arg2) {
			haxe_Log.trace(arg2,{ fileName : "Main.hx", lineNumber : 142, className : "Main", methodName : "new"});
			event6.returnValue = "dong";
		});
	});
};
Main.__name__ = true;
Main.main = function() {
	new Main();
};
Main.prototype = {
	onOpenDialogHandler: function(event) {
		var _gthis = this;
		electron_main_Dialog.showOpenDialog(null,{ },function(fileNames) {
			haxe_Log.trace(fileNames,{ fileName : "Main.hx", lineNumber : 159, className : "Main", methodName : "onOpenDialogHandler"});
			if(fileNames == null) {
				haxe_Log.trace("No file selected",{ fileName : "Main.hx", lineNumber : 162, className : "Main", methodName : "onOpenDialogHandler"});
				return;
			}
			var filepath = fileNames[0];
			js_node_Fs.readFile(filepath,"utf-8",function(err,data) {
				if(err != null) {
					haxe_Log.trace("An error ocurred reading the file :" + err.message,{ fileName : "Main.hx", lineNumber : 170, className : "Main", methodName : "onOpenDialogHandler"});
					return;
				}
				if(event != null) {
					event.sender.send("SEND_FILE_CONTENT",filepath,data);
				} else {
					_gthis.mainWindow.webContents.send("SEND_FILE_CONTENT",filepath,data);
				}
			});
		});
	}
	,onSaveFileHandler: function(event,filepath,content) {
		var _gthis = this;
		haxe_Log.trace(filepath,{ fileName : "Main.hx", lineNumber : 185, className : "Main", methodName : "onSaveFileHandler", customParams : [content]});
		js_node_Fs.writeFile(filepath,content,function(err) {
			if(err != null) {
				haxe_Log.trace("An error ocurred updating the file" + err.message,{ fileName : "Main.hx", lineNumber : 188, className : "Main", methodName : "onSaveFileHandler"});
				haxe_Log.trace(err,{ fileName : "Main.hx", lineNumber : 189, className : "Main", methodName : "onSaveFileHandler"});
				return;
			}
			haxe_Log.trace("The file has been succesfully saved",{ fileName : "Main.hx", lineNumber : 192, className : "Main", methodName : "onSaveFileHandler"});
			_gthis.mainWindow.webContents.send("SEND_FILE_PATH",filepath);
		});
	}
	,onSaveAsFileHandler: function(event,filepath,content) {
		var _gthis = this;
		electron_main_Dialog.showSaveDialog(this.mainWindow,{ title : "_foo", defaultPath : "~/_foo.md"},function(result) {
			haxe_Log.trace("" + result,{ fileName : "Main.hx", lineNumber : 202, className : "Main", methodName : "onSaveAsFileHandler"});
			_gthis.onSaveFileHandler(null,result,content);
		});
	}
};
var MainMenu = function(main) {
	var _gthis = this;
	this.main = main;
	var template = [{ label : "File", submenu : [{ label : "New File", accelerator : "CmdOrCtrl+N", click : function() {
		_gthis.keyMapping("newfile");
	}},{ type : "separator"},{ label : "Open...", accelerator : "CmdOrCtrl+O", click : function() {
		_gthis.keyMapping("open");
	}},{ label : "Open Recent", enabled : false, submenu : [{ label : "a", click : function() {
		_gthis.keyMapping("a");
	}},{ label : "b", click : function() {
		_gthis.keyMapping("b");
	}}]},{ type : "separator"},{ label : "Save", accelerator : "CmdOrCtrl+S", click : function() {
		_gthis.keyMapping("save");
	}},{ label : "Save As...", accelerator : "Shift+CmdOrCtrl+S", click : function() {
		_gthis.keyMapping("saveas");
	}},{ label : "Save all", accelerator : "Alt+CmdOrCtrl+S", click : function() {
		_gthis.keyMapping("saveall");
	}}]},{ label : "Edit", submenu : [{ label : "Undo", accelerator : "CmdOrCtrl+Z", role : "undo"},{ label : "Redo", accelerator : "Shift+CmdOrCtrl+Z", role : "redo"},{ label : "Cut", accelerator : "CmdOrCtrl+X", role : "cut"},{ label : "Copy", accelerator : "CmdOrCtrl+C", role : "copy"},{ label : "Paste", accelerator : "CmdOrCtrl+V", role : "paste"},{ label : "Select All", accelerator : "CmdOrCtrl+A", role : "selectall"}]},{ label : "View", submenu : [{ role : "reload"},{ role : "forcereload"},{ role : "toggledevtools"},{ type : "separator"},{ role : "resetzoom"},{ role : "zoomin"},{ role : "zoomout"},{ type : "separator"},{ role : "togglefullscreen"}]},{ role : "window", submenu : [{ role : "minimize"},{ role : "close"}]},{ role : "help", submenu : [{ label : "Learn More", click : function() {
		electron_Shell.openExternal("https://github.com/MatthijsKamstra/hx-markdown-editor");
	}}]}];
	if(process.platform == "darwin") {
		template.unshift({ label : electron_main_App.getName(), submenu : [{ role : "about"},{ type : "separator"},{ role : "services"},{ type : "separator"},{ role : "hide"},{ role : "hideothers"},{ role : "unhide"},{ type : "separator"},{ role : "quit"}]});
	}
	var menu = electron_main_Menu.buildFromTemplate(template);
	electron_main_Menu.setApplicationMenu(menu);
};
MainMenu.__name__ = true;
MainMenu.prototype = {
	keyMapping: function(name) {
		switch(name) {
		case "newfile":
			haxe_Log.trace("--> newfile",{ fileName : "MainMenu.hx", lineNumber : 152, className : "MainMenu", methodName : "keyMapping"});
			break;
		case "open":
			haxe_Log.trace("--> open",{ fileName : "MainMenu.hx", lineNumber : 149, className : "MainMenu", methodName : "keyMapping"});
			this.main.onOpenDialogHandler(null);
			break;
		case "save":
			haxe_Log.trace("--> save",{ fileName : "MainMenu.hx", lineNumber : 155, className : "MainMenu", methodName : "keyMapping"});
			this.main.mainWindow.webContents.send("PING_SAVE");
			break;
		case "saveall":
			haxe_Log.trace("--> saveall",{ fileName : "MainMenu.hx", lineNumber : 153, className : "MainMenu", methodName : "keyMapping"});
			break;
		case "saveas":
			haxe_Log.trace("--> saveas",{ fileName : "MainMenu.hx", lineNumber : 151, className : "MainMenu", methodName : "keyMapping"});
			this.main.mainWindow.webContents.send("SAVE_AS_FILE");
			break;
		default:
			console.info("case '" + name + "' : trace(\"--> " + name + "\"); ");
		}
	}
};
Math.__name__ = true;
var electron_CrashReporter = require("electron").crashReporter;
var electron_Shell = require("electron").shell;
var electron_main_App = require("electron").app;
var electron_main_BrowserWindow = require("electron").BrowserWindow;
var electron_main_Dialog = require("electron").dialog;
var electron_main_IpcMain = require("electron").ipcMain;
var electron_main_Menu = require("electron").Menu;
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_io_Bytes = function() { };
haxe_io_Bytes.__name__ = true;
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_node_Fs = require("fs");
var js_node_buffer_Buffer = require("buffer").Buffer;
String.__name__ = true;
Array.__name__ = true;
Main.main();
})();

//# sourceMappingURL=main.js.map